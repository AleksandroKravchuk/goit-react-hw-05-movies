{"version":3,"file":"static/js/387.cfd87ea5.chunk.js","mappings":"oSACMA,EAAO,mCAEN,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACqBC,IAAAA,IAAA,gEAAmEF,IADxF,uBACMG,EADN,EACMA,KADN,kBAEMA,GAFN,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,yFACqBH,IAAAA,IAAA,4DAA+DF,EAA/D,4DAA0HK,IAD/I,uBACMF,EADN,EACMA,KADN,kBAEMA,GAFN,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,yFACkBL,IAAAA,IAAA,6CAAgDK,EAAhD,oBAAoEP,EAApE,oBADlB,uBACGG,EADH,EACGA,KADH,kBAEMA,GAFN,kEAKA,SAAeK,EAAtB,iDAAO,OAAP,oBAAO,WAA8BD,EAAUE,GAAxC,yFACkBP,IAAAA,IAAA,6CAAgDK,EAAhD,YAA4DE,EAA5D,oBAA+ET,EAA/E,oBADlB,uBACGG,EADH,EACGA,KADH,kBAEKA,GAFL,oE,yGChBMO,EAAiBC,EAAAA,GAAAA,QAAH,8GAMdC,EAAcD,EAAAA,GAAAA,EAAH,iEAIXE,EAAcF,EAAAA,GAAAA,EAAH,8D,mBCYxB,EApBgB,WACd,OAA0BG,EAAAA,EAAAA,GAAS,WAA3BX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,QACd,GAAKZ,EAAKa,QAAV,CAGA,IAAMC,EAAUd,EAAKa,QACrB,OACE,UAACN,EAAD,WACGK,IAAW,SAAC,KAAD,CAAWG,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KACtC,IAAnBH,EAAQI,QACP,iCACE,UAACT,EAAD,sBAAsBK,EAAQ,GAAGK,WACjC,SAACT,EAAD,UAAcI,EAAQ,GAAGM,cAG3B,SAACV,EAAD,4D,0GCdKC,EAAW,SAACL,GACvB,OAAwBe,EAAAA,EAAAA,UAAS,IAAjC,eAAOrB,EAAP,KAAasB,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOT,EAAP,KAAgBW,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcN,OAZFE,EAAAA,EAAAA,YAAU,WACHF,IAGLD,GAAW,IACXlB,EAAAA,EAAAA,IAAemB,EAAQlB,GACpBqB,MAAK,SAAA3B,GACJsB,EAAQtB,MAET4B,OAAM,SAAAC,GAAK,OAAIC,EAAAA,OAAAA,QAAe,kCAC9BC,SAAQ,kBAAMR,GAAW,SAC3B,CAACC,EAASlB,IACJ,CAAEN,KAAAA,EAAMY,QAAAA","sources":["API/api.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","hooks/useFethc.js"],"sourcesContent":["import axios from \"axios\";\nconst API_KEY = `419c8d7d79cbcac22c5520f1ac14d2c7`;\n\nexport async function fetchMovies(){\n     const { data } = await axios.get(`https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`);\n      return data;     \n};\n\nexport async function fetchSearchMovies(searchName) {\n     const { data } = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${searchName}`);\n      return data;     \n  };\n\nexport async function fetchSelectedMovie(movie_id){\n  const { data } = await axios.get(`https://api.themoviedb.org/3/movie/${movie_id}?api_key=${API_KEY}&language=en-US`);\n      return data;     \n  };\n   \nexport async function fetchMovieInfo(movie_id, meaning) {\n  const { data } = await axios.get(`https://api.themoviedb.org/3/movie/${movie_id}/${meaning}?api_key=${API_KEY}&language=en-US`);\n     return data;     \n  };\n    \n","import styled from 'styled-components';\n\nexport const ReviewsSection = styled.section`\n  width: 100%;\n  text-align: start;\n  background-color: #aaf7bd;\n  padding: 10px;\n`;\nexport const ReviewsName = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\nexport const ReviewsText = styled.p`\n  font-size: 14px;\n  padding: 10px;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { ReviewsSection, ReviewsName, ReviewsText } from './Reviews.styled';\nimport { useFetch } from 'hooks/useFethc';\n\nconst Reviews = () => {\n  const { data, loading } = useFetch('reviews');\n  if (!data.results) {\n    return;\n  }\n  const reviews = data.results;\n  return (\n    <ReviewsSection>\n      {loading && <ThreeDots color=\"#00BFFF\" height={60} width={60} />}\n      {reviews.length !== 0 ? (\n        <>\n          <ReviewsName>Author: {reviews[0].author}</ReviewsName>\n          <ReviewsText>{reviews[0].content}</ReviewsText>\n        </>\n      ) : (\n        <ReviewsText>We dont have any reviews for this movie</ReviewsText>\n      )}\n    </ReviewsSection>\n  );\n};\nexport default Reviews;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport {  fetchMovieInfo } from 'API/api';\n\nexport const useFetch = (meaning) => {\n  const [data, setdata] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    setLoading(true);\n    fetchMovieInfo(movieId,meaning)\n      .then(data => {\n        setdata(data);\n      })\n      .catch(error => Notify.failure('Ooooops somthing went wrong'))\n      .finally(() => setLoading(false));\n  }, [movieId, meaning]);\n    return { data, loading };\n}\n"],"names":["API_KEY","fetchMovies","axios","data","fetchSearchMovies","searchName","fetchSelectedMovie","movie_id","fetchMovieInfo","meaning","ReviewsSection","styled","ReviewsName","ReviewsText","useFetch","loading","results","reviews","color","height","width","length","author","content","useState","setdata","setLoading","movieId","useParams","useEffect","then","catch","error","Notify","finally"],"sourceRoot":""}